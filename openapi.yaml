openapi: 3.0.0
info:
  title: User API
  description: API for managing user profiles
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server
tags:
  - name: Users
    description: User profile operations
paths:
  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/ErrResponse'
    delete:
      tags: [Users]
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/ErrResponse'
  /users:
    post:
      tags: [Users]
      summary: Create a new user
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrResponse'
  /users/{id}/about:
    patch:
      tags: [Users]
      summary: Update user's about section
      operationId: updateUserAbout
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutUpdate'
      responses:
        '200':
          description: About section updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/name:
    patch:
      tags: [Users]
      summary: Update user's name
      operationId: updateUserName
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NameUpdate'
      responses:
        '200':
          description: Name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/surname:
    patch:
      tags: [Users]
      summary: Update user's surname
      operationId: updateUserSurname
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurnameUpdate'
      responses:
        '200':
          description: Surname updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/primary_photo:
    patch:
      tags: [Users]
      summary: Update user's primary photo
      operationId: updatePrimaryPhoto
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrimaryPhotoUpdate'
      responses:
        '200':
          description: Primary photo updated successfully
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/photos:
    get:
      tags: [Users]
      summary: Get user's photos
      operationId: getUserPhotos
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: List of user's photos. Should be a form
          content:
            form:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPhoto'
        '404':
          $ref: '#/components/responses/ErrResponse'
    put:
      tags: [Users]
      summary: Add a photo to user's profile
      operationId: addUserPhoto
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '201':
          description: Photo added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/photos/{photoId}:
    delete:
      tags: [Users]
      summary: Remove a photo from user's profile
      operationId: removeUserPhoto
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/photoId'
        - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '204':
          description: Photo removed successfully
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/tag:
    put:
      tags: [Users]
      summary: Add a tag to user's profile
      operationId: addUserTag
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagAdd'
      responses:
        '201':
          description: Tag added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTag'
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  
  /users/{id}/tags/{tagId}:
    delete:
      tags: [Users]
      summary: Remove a tag from user's profile
      operationId: removeUserTag
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/tagId'
        - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '204':
          description: Tag removed successfully
        '400':
          $ref: '#/components/responses/ErrResponse'
        '404':
          $ref: '#/components/responses/ErrResponse'
  /users/{id}/tags:
    get:
      tags: [Users]
      summary: Get user's tags
      operationId: getUserTags
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: List of user's tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTag'
        '404':
          $ref: '#/components/responses/ErrResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        name:
          type: string
          description: User's first name
        surname:
          type: string
          description: User's last name
        gender:
          type: string
          enum: [MALE, FEMALE]
          description: User's gender identity
        created_at:
          type: string
          format: date-time
          description: When the user was created
        about_myself:
          type: string
          description: User's self-description
        jung_result:
          type: string
          description: User's Jung personality test result
        jung_last_attempt:
          type: string
          format: date-time
          description: When the user last attempted the Jung test
        primary_photo:
          type: string
          format: uri
          description: URL of the user's primary photo
        photos:
          type: array
          items:
            type: string
            format: uri
          description: URLs of all user photos
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the user
      required:
        - id
        - name
        - surname
        - created_at
    
    AboutUpdate:
      type: object
      properties:
        about_myself:
          type: string
          maxLength: 1000
      required:
        - about_myself
    
    NameUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
      required:
        - name
    
    SurnameUpdate:
      type: object
      properties:
        surname:
          type: string
          maxLength: 100
      required:
        - surname
    PrimaryPhotoUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - url
    PhotoAdd:
      type: object
      properties:
        url:
          type: string
          format: uri
      required:
        - url
    UserTag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
          maxLength: 50
      required:
        - id
        - value
    UserPhoto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: url
      required:
        - id
        - url

    TagAdd:
      type: object
      properties:
        tag:
          type: string
          maxLength: 50
      required:
        - tag
    UserCreate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: User's first name
        surname:
          type: string
          maxLength: 100
          description: User's last name
        gender:
          type: string
          enum: [MALE, FEMALE]
          description: User's gender identity
        about_myself:
          type: string
          maxLength: 1000
          description: User's self-description
      required:
        - name
        - surname
    
  
  parameters:
    userId:
      name: id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
    
    photoId:
      name: photoId
      in: path
      description: Photo ID
      required: true
      schema:
        type: string
        format: uuid
    
    tagId:
      name: tagId
      in: path
      description: Tag ID
      required: true
      schema:
        type: string
        format: uuid
    
    idempotencyKey:
      name: Idempotency-Key
      in: header
      description: Key to make the request idempotent
      required: false
      schema:
        type: string
        format: uuid
  
  responses:
    ErrResponse:
      description: Returned if any error happened
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: array
                items:
                  type: string