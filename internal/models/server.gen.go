// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package models

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for UserGender.
const (
	UserGenderFEMALE UserGender = "FEMALE"
	UserGenderMALE   UserGender = "MALE"
)

// Defines values for UserCreateGender.
const (
	UserCreateGenderFEMALE UserCreateGender = "FEMALE"
	UserCreateGenderMALE   UserCreateGender = "MALE"
)

// AboutUpdate defines model for AboutUpdate.
type AboutUpdate struct {
	AboutMyself string `json:"about_myself"`
}

// NameUpdate defines model for NameUpdate.
type NameUpdate struct {
	Name string `json:"name"`
}

// PrimaryPhotoUpdate defines model for PrimaryPhotoUpdate.
type PrimaryPhotoUpdate struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// SurnameUpdate defines model for SurnameUpdate.
type SurnameUpdate struct {
	Surname string `json:"surname"`
}

// TagAdd defines model for TagAdd.
type TagAdd struct {
	Tag string `json:"tag"`
}

// User defines model for User.
/*type User struct {
	// AboutMyself User's self-description
	AboutMyself *string `json:"about_myself,omitempty"`

	// CreatedAt When the user was created
	CreatedAt time.Time `json:"created_at"`

	// Gender User's gender identity
	Gender *UserGender `json:"gender,omitempty"`
	BirthDate       *time.Time

	// Id Unique identifier for the user
	Id openapi_types.UUID `json:"id"`

	// JungLastAttempt When the user last attempted the Jung test
	JungLastAttempt *time.Time `json:"jung_last_attempt,omitempty"`

	// JungResult User's Jung personality test result
	JungResult *string `json:"jung_result,omitempty"`

	// Name User's first name
	Name string `json:"name"`

	// Photos URLs of all user photos
	Photos *[]string `json:"photos,omitempty"`

	// PrimaryPhoto URL of the user's primary photo
	PrimaryPhoto *string `json:"primary_photo,omitempty"`

	// Surname User's last name
	Surname string `json:"surname"`

	// Tags Tags associated with the user
	Tags *[]string `json:"tags,omitempty"`
}
*/
// UserGender User's gender identity
//type UserGender string

// UserCreate defines model for UserCreate.
type UserCreate struct {
	// AboutMyself User's self-description
	AboutMyself *string `json:"about_myself,omitempty"`

	// Gender User's gender identity
	Gender *UserCreateGender `json:"gender,omitempty"`

	// Name User's first name
	Name string `json:"name"`

	// Surname User's last name
	Surname string `json:"surname"`
}

// UserCreateGender User's gender identity
type UserCreateGender string

/*type UserProfileUpdate struct {
	AboutMyself *string       `json:"about_myself,omitempty"`
	BirthDate   *time.Time    `json:"birth_date,omitempty"`
	Gender      *UserGender   `json:"gender,omitempty"`
	Name        *string       `json:"name,omitempty"`
	Surname     *string       `json:"surname,omitempty"`
	JungResult      *string       `json:"jung_result,omitempty"`  // Новое поле
	JungLastAttempt *time.Time    `json:"jung_last_attempt,omitempty"` // Новое поле
}*/


// UpdateUserProfileParams defines parameters for UpdateUserProfile.
type UpdateUserProfileParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody = UserProfileUpdate

// UserPhoto defines model for UserPhoto.
/*type UserPhoto struct {
	Id  openapi_types.UUID `json:"id"`
	Url string             `json:"url"`
}*/

// UserTag defines model for UserTag.
/*type UserTag struct {
	Id    openapi_types.UUID `json:"id"`
	Value string             `json:"value"`
}*/

// IdempotencyKey defines model for idempotencyKey.
type IdempotencyKey = openapi_types.UUID

// PhotoId defines model for photoId.
type PhotoId = openapi_types.UUID

// TagId defines model for tagId.
type TagId = openapi_types.UUID

// UserId defines model for userId.
type UserId = openapi_types.UUID

// ErrResponse defines model for ErrResponse.
type ErrResponse struct {
	Details *[]string `json:"details,omitempty"`
	Error   *string   `json:"error,omitempty"`
}

// CreateUserParams defines parameters for CreateUser.
type CreateUserParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// UpdateUserAboutParams defines parameters for UpdateUserAbout.
type UpdateUserAboutParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// UpdateUserNameParams defines parameters for UpdateUserName.
type UpdateUserNameParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// AddUserPhotoParams defines parameters for AddUserPhoto.
type AddUserPhotoParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// RemoveUserPhotoParams defines parameters for RemoveUserPhoto.
type RemoveUserPhotoParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// UpdatePrimaryPhotoParams defines parameters for UpdatePrimaryPhoto.
type UpdatePrimaryPhotoParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// UpdateUserSurnameParams defines parameters for UpdateUserSurname.
type UpdateUserSurnameParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// AddUserTagParams defines parameters for AddUserTag.
type AddUserTagParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// RemoveUserTagParams defines parameters for RemoveUserTag.
type RemoveUserTagParams struct {
	// IdempotencyKey Key to make the request idempotent
	IdempotencyKey *IdempotencyKey `json:"Idempotency-Key,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreate

// UpdateUserAboutJSONRequestBody defines body for UpdateUserAbout for application/json ContentType.
type UpdateUserAboutJSONRequestBody = AboutUpdate

// UpdateUserNameJSONRequestBody defines body for UpdateUserName for application/json ContentType.
type UpdateUserNameJSONRequestBody = NameUpdate

// UpdatePrimaryPhotoJSONRequestBody defines body for UpdatePrimaryPhoto for application/json ContentType.
type UpdatePrimaryPhotoJSONRequestBody = PrimaryPhotoUpdate

// UpdateUserSurnameJSONRequestBody defines body for UpdateUserSurname for application/json ContentType.
type UpdateUserSurnameJSONRequestBody = SurnameUpdate

// AddUserTagJSONRequestBody defines body for AddUserTag for application/json ContentType.
type AddUserTagJSONRequestBody = TagAdd

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new user
	// (POST /users)
	CreateUser(ctx echo.Context, params CreateUserParams) error
	// Delete a user
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id UserId, params DeleteUserParams) error
	// Get user by ID
	// (GET /users/{id})
	GetUserById(ctx echo.Context, id UserId) error
	// Update user's entire profile
    // (PATCH /users/{id}/profile)
    UpdateUserProfile(ctx echo.Context, id UserId, params UpdateUserProfileParams) error
	// Update user's about section
	// (PATCH /users/{id}/about)
	UpdateUserAbout(ctx echo.Context, id UserId, params UpdateUserAboutParams) error
	// Update user's name
	// (PATCH /users/{id}/name)
	UpdateUserName(ctx echo.Context, id UserId, params UpdateUserNameParams) error
	// Get user's photos
	// (GET /users/{id}/photos)
	GetUserPhotos(ctx echo.Context, id UserId) error
	// Add a photo to user's profile
	// (PUT /users/{id}/photos)
	AddUserPhoto(ctx echo.Context, id UserId, params AddUserPhotoParams) error
	// Remove a photo from user's profile
	// (DELETE /users/{id}/photos/{photoId})
	RemoveUserPhoto(ctx echo.Context, id UserId, photoId PhotoId, params RemoveUserPhotoParams) error
	// Update user's primary photo
	// (PATCH /users/{id}/primary_photo)
	UpdatePrimaryPhoto(ctx echo.Context, id UserId, params UpdatePrimaryPhotoParams) error
	// Update user's surname
	// (PATCH /users/{id}/surname)
	UpdateUserSurname(ctx echo.Context, id UserId, params UpdateUserSurnameParams) error
	// Add a tag to user's profile
	// (PUT /users/{id}/tag)
	AddUserTag(ctx echo.Context, id UserId, params AddUserTagParams) error
	// Get user's tags
	// (GET /users/{id}/tags)
	GetUserTags(ctx echo.Context, id UserId) error
	// Remove a tag from user's profile
	// (DELETE /users/{id}/tags/{tagId})
	RemoveUserTag(ctx echo.Context, id UserId, tagId TagId, params RemoveUserTagParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateUserParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx, params)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id, params)
	return err
}

// GetUserById converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserById(ctx, id)
	return err
}

// UpdateUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserProfileParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserProfile(ctx, id, params)
	return err
}

// UpdateUserAbout converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserAbout(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserAboutParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserAbout(ctx, id, params)
	return err
}

// UpdateUserName converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserNameParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserName(ctx, id, params)
	return err
}

// GetUserPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserPhotos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserPhotos(ctx, id)
	return err
}

// AddUserPhoto converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserPhoto(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AddUserPhotoParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserPhoto(ctx, id, params)
	return err
}

// RemoveUserPhoto converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveUserPhoto(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "photoId" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameterWithLocation("simple", false, "photoId", runtime.ParamLocationPath, ctx.Param("photoId"), &photoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter photoId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveUserPhotoParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveUserPhoto(ctx, id, photoId, params)
	return err
}

// UpdatePrimaryPhoto converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePrimaryPhoto(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePrimaryPhotoParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePrimaryPhoto(ctx, id, params)
	return err
}

// UpdateUserSurname converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserSurname(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserSurnameParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserSurname(ctx, id, params)
	return err
}

// AddUserTag converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AddUserTagParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserTag(ctx, id, params)
	return err
}

// GetUserTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTags(ctx, id)
	return err
}

// RemoveUserTag converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveUserTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tagId" -------------
	var tagId TagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagId", runtime.ParamLocationPath, ctx.Param("tagId"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveUserTagParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveUserTag(ctx, id, tagId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.GetUserById)
	router.PATCH(baseURL+"/users/:id/profile", wrapper.UpdateUserProfile)
	router.PATCH(baseURL+"/users/:id/about", wrapper.UpdateUserAbout)
	router.PATCH(baseURL+"/users/:id/name", wrapper.UpdateUserName)
	router.GET(baseURL+"/users/:id/photos", wrapper.GetUserPhotos)
	router.PUT(baseURL+"/users/:id/photos", wrapper.AddUserPhoto)
	router.DELETE(baseURL+"/users/:id/photos/:photoId", wrapper.RemoveUserPhoto)
	router.PATCH(baseURL+"/users/:id/primary_photo", wrapper.UpdatePrimaryPhoto)
	router.PATCH(baseURL+"/users/:id/surname", wrapper.UpdateUserSurname)
	router.PUT(baseURL+"/users/:id/tag", wrapper.AddUserTag)
	router.GET(baseURL+"/users/:id/tags", wrapper.GetUserTags)
	router.DELETE(baseURL+"/users/:id/tags/:tagId", wrapper.RemoveUserTag)

}
